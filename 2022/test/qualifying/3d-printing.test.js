const threeDPrinting = require('../../qualifying/3d-printing/index');

describe('splitInput', () => {
    test('sample.in', () => {
        expect(
            threeDPrinting.splitInput(`3
300000 200000 300000 500000
300000 200000 500000 300000
300000 500000 300000 200000
1000000 1000000 0 0
0 1000000 1000000 1000000
999999 999999 999999 999999
768763 148041 178147 984173
699508 515362 534729 714381
949704 625054 946212 951187`.split(/\r?\n/))
        )
        .toStrictEqual(
            [
                [
                    [
                        300000,
                        200000,
                        300000,
                        500000,
                    ],
                    [
                        300000,
                        200000,
                        500000,
                        300000,
                    ],
                    [
                        300000,
                        500000,
                        300000,
                        200000,
                    ],
                ],
                [
                    [
                        1000000,
                        1000000,
                        0,
                        0,
                    ],
                    [
                        0,
                        1000000,
                        1000000,
                        1000000,
                    ],
                    [
                        999999,
                        999999,
                        999999,
                        999999,
                    ],
                ],
                [
                    [
                        768763,
                        148041,
                        178147,
                        984173,
                    ],
                    [
                        699508,
                        515362,
                        534729,
                        714381,
                    ],
                    [
                        949704,
                        625054,
                        946212,
                        951187,
                    ],
                ],
            ]
        );
    });
});

describe('minLevels', () => {
    test('[[300000, 200000, 300000, 500000], [300000, 200000, 500000, 300000], [300000, 500000, 300000, 200000]]', () => {
        expect(threeDPrinting.minLevels([[300000, 200000, 300000, 500000], [300000, 200000, 500000, 300000], [300000, 500000, 300000, 200000]])).toStrictEqual([300000, 200000, 300000, 200000]);
    });

    test('[[1000000, 1000000, 0, 0], [0, 1000000, 1000000, 1000000], [999999, 999999, 999999, 999999]]', () => {
        expect(threeDPrinting.minLevels([[1000000, 1000000, 0, 0], [0, 1000000, 1000000, 1000000], [999999, 999999, 999999, 999999]])).toStrictEqual([0, 999999, 0, 0]);
    });

    test('[[768763, 148041, 178147, 984173], [699508, 515362, 534729, 714381], [949704, 625054, 946212, 951187]]', () => {
        expect(threeDPrinting.minLevels([[768763, 148041, 178147, 984173], [699508, 515362, 534729, 714381], [949704, 625054, 946212, 951187]])).toStrictEqual([699508, 148041, 178147, 714381]);
    });
});

describe('solve', () => {
    test('[[300000, 200000, 300000, 500000], [300000, 200000, 500000, 300000], [300000, 500000, 300000, 200000]]', () => {
        expect(threeDPrinting.solve([[300000, 200000, 300000, 500000], [300000, 200000, 500000, 300000], [300000, 500000, 300000, 200000]])).toBe('300000 200000 300000 200000');
    });

    test('[[1000000, 1000000, 0, 0], [0, 1000000, 1000000, 1000000], [999999, 999999, 999999, 999999]]', () => {
        expect(threeDPrinting.solve([[1000000, 1000000, 0, 0], [0, 1000000, 1000000, 1000000], [999999, 999999, 999999, 999999]])).toBe('IMPOSSIBLE');
    });

    test('[[768763, 148041, 178147, 984173], [699508, 515362, 534729, 714381], [949704, 625054, 946212, 951187]]', () => {
        expect(threeDPrinting.solve([[768763, 148041, 178147, 984173], [699508, 515362, 534729, 714381], [949704, 625054, 946212, 951187]])).toBe('699508 148041 152451 0');
    });
});

describe('solveInputs', () => {
    test('sample.in', () => {
        expect(
            threeDPrinting.solveInputs(`3
300000 200000 300000 500000
300000 200000 500000 300000
300000 500000 300000 200000
1000000 1000000 0 0
0 1000000 1000000 1000000
999999 999999 999999 999999
768763 148041 178147 984173
699508 515362 534729 714381
949704 625054 946212 951187`.split(/\r?\n/))
        )
        .toStrictEqual(
            [
                'Case #1: 300000 200000 300000 200000',
                'Case #2: IMPOSSIBLE',
                'Case #3: 699508 148041 152451 0',
            ]
        );
    });
});
